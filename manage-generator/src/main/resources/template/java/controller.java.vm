package ${packageName}.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import com.gong.manage.common.result.Pages;
import com.gong.manage.common.result.Result;
import com.gong.manage.common.annotation.Log;
import com.gong.manage.common.enums.BusinessType;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.${ClassName}Service;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller {

    @Autowired
    private ${ClassName}Service ${className}Service;

    /**
     * 新增${functionName}
     */
    @PostMapping
    @PreAuthorize("@s.hasAuthority('${permissionPrefix}:add')")
    @Log(title = "新增${functionName}", businessType = BusinessType.INSERT)
    public Result<String> save(@RequestBody ${ClassName} ${className}) {
        ${className}Service.save${ClassName}(${className});
        return Result.success("添加成功");
    }

    /**
     * 修改${functionName}
     */
    @PutMapping
    @PreAuthorize("@s.hasAuthority('${permissionPrefix}:edit')")
    @Log(title = "修改${functionName}", businessType = BusinessType.EDIT)
    public Result<String> edit(@RequestBody ${ClassName} ${className}) {
        ${className}Service.update${ClassName}By${pkColumn.getFieldFirstUpper()}(${className});
        return Result.success("更新成功");
    }

    /**
     * 查询${functionName}
     */
    @GetMapping("/list")
    @PreAuthorize("@s.hasAuthority('${permissionPrefix}:list')")
    public Result<Pages<${ClassName}>> list(${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.get${ClassName}List(${className});
        return Result.success(Pages.createPage(list));
    }

    /**
     * 获取${functionName}详细信息
     */
    @GetMapping("/{${pkColumn.javaField}}")
    @PreAuthorize("@s.hasAuthority('${permissionPrefix}:query')")
    public Result<${ClassName}> getInfo(@PathVariable("${pkColumn.javaField}")${pkColumn.javaType} ${pkColumn.javaField}) {
        return Result.success(${className}Service.getBy${pkColumn.getFieldFirstUpper()}(${pkColumn.javaField}));
    }

    /**
     * 删除${functionName}
     */
    @DeleteMapping("/{${pkColumn.javaField}s}")
    @PreAuthorize("@s.hasAuthority('${permissionPrefix}:remove')")
    public Result<String> remove(@RequestParam("${pkColumn.javaField}s") List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        ${className}Service.removeBy${pkColumn.getFieldFirstUpper()}s(${pkColumn.javaField}s);
        return Result.success("删除成功");
    }
}
